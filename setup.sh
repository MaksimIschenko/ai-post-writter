#!/usr/bin/env bash
set -euo pipefail

# === –ö–æ–Ω—Ñ–∏–≥ ===
PROJECT_NAME_TOML="ai-post-writter"                 # –∏–∑ [project].name
PACKAGE_NAME="${PROJECT_NAME_TOML//-/_}"            # –∏–º—è –ø–∞–∫–µ—Ç–∞ –≤ src/
REQUIRES_PY="3.12"                                  # –º–∞–∂–æ—Ä-–º–∏–Ω–æ—Ä –∏–∑ requires-python
PY_PIN_CANDIDATES=(
  "cpython-${REQUIRES_PY}.11-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.10-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.9-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.8-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.7-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.6-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.5-macos-aarch64-none"
  "cpython-${REQUIRES_PY}.4-macos-aarch64-none"
)

# === –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ ===
bold() { printf "\033[1m%s\033[0m\n" "$*"; }
info() { printf "üëâ %s\n" "$*"; }
ok()   { printf "‚úÖ %s\n" "$*"; }
warn() { printf "‚ö†Ô∏è  %s\n" "$*"; }

# === 0) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è pyproject.toml ===
if [[ ! -f "pyproject.toml" ]]; then
  echo "pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $(pwd). –ü–æ–º–µ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏."
  exit 1
fi

# === 1) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ uv –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ===
if ! command -v uv >/dev/null 2>&1; then
  bold "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é uv‚Ä¶"
  # macOS install
  curl -LsSf https://astral.sh/uv/install.sh | sh
  ok "uv —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
  export PATH="$HOME/.local/bin:$PATH"
fi

# === 2) –§–∏–∫—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ruff/mypy –ø–æ–¥ –∏–º—è –ø–∞–∫–µ—Ç–∞ ===
#   - –≤ —Ç–≤–æ—ë–º pyproject —Å–µ–π—á–∞—Å –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è "myproject" ‚Äî –∑–∞–º–µ–Ω–∏–º –Ω–∞ –∏–º—è –ø–∞–∫–µ—Ç–∞.
if grep -q 'myproject' pyproject.toml; then
  info "–ü—Ä–∏–≤–æ–∂—É –∫–æ–Ω—Ñ–∏–≥–∏ ruff/mypy –∫ –º–æ–¥—É–ª—é ${PACKAGE_NAME}‚Ä¶"
  # BSD/macOS sed requires backup suffix; –ø–æ—Ç–æ–º —É–¥–∞–ª–∏–º –±—ç–∫–∞–ø—ã
  sed -i '' "s/myproject/${PACKAGE_NAME}/g" pyproject.toml || true
  find . -name "pyproject.toml''" -delete 2>/dev/null || true
  ok "–ö–æ–Ω—Ñ–∏–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
fi

# === 3) –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ ===
if [[ ! -d "src/${PACKAGE_NAME}" ]]; then
  info "–°–æ–∑–¥–∞—é src/${PACKAGE_NAME}‚Ä¶"
  mkdir -p "src/${PACKAGE_NAME}"
  printf "__all__ = []\n" > "src/${PACKAGE_NAME}/__init__.py"
  cat > "src/${PACKAGE_NAME}/cli.py" <<'PY'
from __future__ import annotations

import typer
from rich.console import Console
from rich.panel import Panel

app = typer.Typer(add_completion=False)
console = Console()

@app.command()
def hello(name: str = "world") -> None:
    console.print(Panel.fit(f"Hello, [bold]{name}[/]!", title="ai-post-writter"))

if __name__ == "__main__":
    app()
PY
  ok "–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç –∏ CLI-—Å–∫–µ–ª–µ—Ç —Å–æ–∑–¥–∞–Ω—ã."
fi

# === 4) –ë–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã ===
if [[ ! -f ".gitignore" ]]; then
  cat > .gitignore <<'GIT'
.uv/
.venv/
dist/
build/
__pycache__/
*.pyc
*.pyo
*.pyd
*.egg-info/
.ipynb_checkpoints/
.mypy_cache/
.ruff_cache/
.coverage
GIT
  ok ".gitignore —Å–æ–∑–¥–∞–Ω."
fi

if [[ ! -f "README.md" ]]; then
  cat > README.md <<EOF
# ${PROJECT_NAME_TOML}

–ü—Ä–æ–µ–∫—Ç –Ω–∞ Python, —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è **uv**.

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç

\`\`\`bash
uv sync --all-groups
uv run python -m ${PACKAGE_NAME}.cli hello
\`\`\`
EOF
  ok "README.md —Å–æ–∑–¥–∞–Ω."
fi

# === 5) –ü–∏–Ω –≤–µ—Ä—Å–∏–∏ Python 3.12.x ===
bold "–ü–∏–Ω Python ${REQUIRES_PY}.x‚Ä¶"
PINNED=false

# –ü–æ–ø—Ä–æ–±—É–µ–º pin –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä 3.12, –µ—Å–ª–∏ –µ—Å—Ç—å
if command -v python3.12 >/dev/null 2>&1; then
  if uv python pin "$(command -v python3.12)"; then
    PINNED=true
    ok "Pinned $(uv run python -V)"
  fi
fi

# –ò–Ω–∞—á–µ ‚Äî –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ uv python list
if [[ "${PINNED}" = false ]]; then
  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç—É–∞–ª–µ–Ω
  uv python list >/dev/null || true
  for build in "${PY_PIN_CANDIDATES[@]}"; do
    if uv python pin "${build}" >/dev/null 2>&1; then
      ok "Pinned ${build}"
      PINNED=true
      break
    fi
  done
fi

# –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º uv —Å–∞–º –ø–æ–¥—Ç—è–Ω—É—Ç—å 3.12.latest
if [[ "${PINNED}" = false ]]; then
  warn "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø—Ä—è–º—É—é –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–∏–ª–¥. –°—Ç–∞–≤–ª—é —Å–≤–µ–∂–∏–π –ø–∞—Ç—á 3.12‚Ä¶"
  uv python install "${REQUIRES_PY}"
  uv python pin "${REQUIRES_PY}"
  ok "Pinned $(uv run python -V)"
fi

# === 6) –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (prod + dev) ===
bold "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è dev)‚Ä¶"
uv sync --all-groups
ok "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."

# === 7) –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ª–∏–Ω—Ç –∏ —Ç–∏–ø-—á–µ–∫ ===
bold "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ruff‚Ä¶"
uv run ruff format .

bold "–õ–∏–Ω—Ç Ruff‚Ä¶"
# –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë, —á—Ç–æ –º–æ–∂–Ω–æ
if ! uv run ruff check .; then
  warn "Ruff –Ω–∞—à—ë–ª –∑–∞–º–µ—á–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞—é."
fi

bold "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ mypy‚Ä¶"
if ! uv run mypy; then
  warn "Mypy –Ω–∞—à—ë–ª –∑–∞–º–µ—á–∞–Ω–∏—è. –ü—Ä–æ–¥–æ–ª–∂–∞—é."
fi

# === 8) –°–±–æ—Ä–∫–∞ –ø–∞–∫–µ—Ç–∞ ===
bold "–°–±–æ—Ä–∫–∞ wheel –∏ sdist‚Ä¶"
uv build
ok "–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ ./dist"

# === 9) –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∑–∞–ø—É—Å–∫—É CLI ===
bold "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞:"
echo "  uv run python -m ${PACKAGE_NAME}.cli hello"
ok "–ì–æ—Ç–æ–≤–æ!"
